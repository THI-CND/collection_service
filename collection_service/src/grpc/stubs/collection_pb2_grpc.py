# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import collection_service.src.grpc.stubs.collection_pb2 as collection__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in collection_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CollectionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCollections = channel.unary_unary(
                '/collection_service.CollectionService/GetCollections',
                request_serializer=collection__pb2.Empty.SerializeToString,
                response_deserializer=collection__pb2.ListCollectionResponse.FromString,
                _registered_method=True)
        self.GetCollectionById = channel.unary_unary(
                '/collection_service.CollectionService/GetCollectionById',
                request_serializer=collection__pb2.CollectionRequest.SerializeToString,
                response_deserializer=collection__pb2.CollectionResponse.FromString,
                _registered_method=True)
        self.CreateCollection = channel.unary_unary(
                '/collection_service.CollectionService/CreateCollection',
                request_serializer=collection__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=collection__pb2.CollectionResponse.FromString,
                _registered_method=True)
        self.UpdateCollection = channel.unary_unary(
                '/collection_service.CollectionService/UpdateCollection',
                request_serializer=collection__pb2.UpdateCollectionRequest.SerializeToString,
                response_deserializer=collection__pb2.CollectionResponse.FromString,
                _registered_method=True)
        self.DeleteCollection = channel.unary_unary(
                '/collection_service.CollectionService/DeleteCollection',
                request_serializer=collection__pb2.DeleteCollectionRequest.SerializeToString,
                response_deserializer=collection__pb2.DeleteCollectionResponse.FromString,
                _registered_method=True)
        self.AddRecipeToCollection = channel.unary_unary(
                '/collection_service.CollectionService/AddRecipeToCollection',
                request_serializer=collection__pb2.ModifyRecipeRequest.SerializeToString,
                response_deserializer=collection__pb2.ModifyRecipeResponse.FromString,
                _registered_method=True)
        self.RemoveRecipeFromCollection = channel.unary_unary(
                '/collection_service.CollectionService/RemoveRecipeFromCollection',
                request_serializer=collection__pb2.ModifyRecipeRequest.SerializeToString,
                response_deserializer=collection__pb2.ModifyRecipeResponse.FromString,
                _registered_method=True)


class CollectionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCollections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCollectionById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRecipeToCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveRecipeFromCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CollectionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCollections,
                    request_deserializer=collection__pb2.Empty.FromString,
                    response_serializer=collection__pb2.ListCollectionResponse.SerializeToString,
            ),
            'GetCollectionById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCollectionById,
                    request_deserializer=collection__pb2.CollectionRequest.FromString,
                    response_serializer=collection__pb2.CollectionResponse.SerializeToString,
            ),
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=collection__pb2.CreateCollectionRequest.FromString,
                    response_serializer=collection__pb2.CollectionResponse.SerializeToString,
            ),
            'UpdateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCollection,
                    request_deserializer=collection__pb2.UpdateCollectionRequest.FromString,
                    response_serializer=collection__pb2.CollectionResponse.SerializeToString,
            ),
            'DeleteCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCollection,
                    request_deserializer=collection__pb2.DeleteCollectionRequest.FromString,
                    response_serializer=collection__pb2.DeleteCollectionResponse.SerializeToString,
            ),
            'AddRecipeToCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRecipeToCollection,
                    request_deserializer=collection__pb2.ModifyRecipeRequest.FromString,
                    response_serializer=collection__pb2.ModifyRecipeResponse.SerializeToString,
            ),
            'RemoveRecipeFromCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveRecipeFromCollection,
                    request_deserializer=collection__pb2.ModifyRecipeRequest.FromString,
                    response_serializer=collection__pb2.ModifyRecipeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'collection_service.CollectionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('collection_service.CollectionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CollectionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection_service.CollectionService/GetCollections',
            collection__pb2.Empty.SerializeToString,
            collection__pb2.ListCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCollectionById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection_service.CollectionService/GetCollectionById',
            collection__pb2.CollectionRequest.SerializeToString,
            collection__pb2.CollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection_service.CollectionService/CreateCollection',
            collection__pb2.CreateCollectionRequest.SerializeToString,
            collection__pb2.CollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection_service.CollectionService/UpdateCollection',
            collection__pb2.UpdateCollectionRequest.SerializeToString,
            collection__pb2.CollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection_service.CollectionService/DeleteCollection',
            collection__pb2.DeleteCollectionRequest.SerializeToString,
            collection__pb2.DeleteCollectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddRecipeToCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection_service.CollectionService/AddRecipeToCollection',
            collection__pb2.ModifyRecipeRequest.SerializeToString,
            collection__pb2.ModifyRecipeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveRecipeFromCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/collection_service.CollectionService/RemoveRecipeFromCollection',
            collection__pb2.ModifyRecipeRequest.SerializeToString,
            collection__pb2.ModifyRecipeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
